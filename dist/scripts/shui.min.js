'use strict';

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _EventManager2 = require("./EventManager");

var EventManager = _interopRequireWildcard(_EventManager2);

(function (R) {
  var objectTypes = {
    'function': true,
    'object': true
  };
  /** Detect free variable `exports`. */
  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = freeExports && freeModule && typeof global == 'object' && global && global.Object && global;

  /** Detect free variable `self`. */
  var freeSelf = objectTypes[typeof self] && self && self.Object && self;

  /** Detect free variable `window`. */
  var freeWindow = objectTypes[typeof window] && window && window.Object && window;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports && freeExports;

  /**
   * Used as a reference to the global object.
   *
   * The `this` value is used if it's the global object to avoid Greasemonkey's
   * restricted `window` object, otherwise the `window` object is used.
   */
  var root = freeGlobal || freeWindow !== (this && this.window) && freeWindow || freeSelf || this;

  var MapBoxProvider = (function () {
    function MapBoxProvider(props) {
      _classCallCheck(this, MapBoxProvider);

      this.map = null;
    }

    _createClass(MapBoxProvider, [{
      key: 'create',
      value: function create(el, mapOptions) {
        this.map = L.mapbox.map(el, mapOptions.mapId, {
          center: mapOptions.center,
          zoom: mapOptions.zoom || 4
        });
        this.featureGroup = L.featureGroup().addTo(this.map);
      }
    }, {
      key: 'invalidateSize',
      value: function invalidateSize() {
        this.map.invalidateSize.apply(this.map, Array.prototype.slice.call(arguments, 0));
      }
    }, {
      key: 'addMarker',
      value: function addMarker(m, onClick) {
        var marker;
        (marker = L.marker(m.latLng, m.options)).addTo(this.map);
        marker.on('click', onClick(m, marker, this.map));
        return marker;
      }
    }, {
      key: 'isValid',
      value: function isValid() {
        return this.state.valid;
      }
    }, {
      key: 'onTextChanged',
      value: function onTextChanged(evt) {
        this.setState({
          text: evt.target.value,
          valid: this.props.validate(evt.target.value)
        });
      }
    }, {
      key: 'componentDidUpdate',
      value: function componentDidUpdate() {
        var onUpdate = this.props.onUpdate;
        onUpdate(this.state.text, this);
      }
    }, {
      key: 'render',
      value: function render() {
        return React.createElement(
          'div',
          { className: 'shui-textfield', 'data-valid': this.state.valid, 'data-state': this.state.enabled ? 'enabled' : 'disabled', 'data-textfield-type': this.props.textFieldType, onClick: this.onClicked.bind(this) },
          React.createElement('input', { type: this.props.fieldType, value: this.state.text, onChange: this.onTextChanged.bind(this) })
        );
      }
    }]);

    return MapBoxProvider;
  })();

  MapBoxProvider.defaultProps = {
    onUpdate: function onUpdate() {},
    validate: function validate() {
      return true;
    },
    enabled: false,
    valid: true,
    textFieldType: 'default'
  };

  root.shui = root.shui || {};
  root.shui.maps = root.shui.maps || {};
  root.shui.maps.MapBoxProvider = MapBoxProvider;

  // Some AMD build optimizers like r.js check for condition patterns like the following:
  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
    // Expose lodash to the global object when an AMD loader is present to avoid
    // errors in cases where lodash is loaded by a script tag and not intended
    // as an AMD module. See http://requirejs.org/docs/errors.html#mismatch for
    // more details.
    root.shui = root.shui;

    // Define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module.
    define(function () {
      return;
    });
  }
  // Check for `exports` after `define` in case a build optimizer adds an `exports` object.
  else if (freeExports && freeModule) {
      // Export for Node.js or RingoJS.
      if (moduleExports) {
        freeModule.exports = MapBoxProvider;
      }
      // Export for Rhino with CommonJS support.
      else {
          freeExports.MapBoxProvider = MapBoxProvider;
        }
    } else {
      // Export for a browser or Rhino.
      root.shui = root.shui || {};
      root.shui.SHTextField = SHTextField;
      // root.SHTextField = _;
    }
}).call(undefined, React || {});

var Lemon = (function (_shui$EventManager) {
  _inherits(Lemon, _shui$EventManager);

  function Lemon() {
    _classCallCheck(this, Lemon);

    _get(Object.getPrototypeOf(Lemon.prototype), 'constructor', this).call(this, []);
  }

  _createClass(Lemon, [{
    key: 'addEventListener',
    value: function addEventListener(ef, c) {}
  }, {
    key: 'removeEventListener',
    value: function removeEventListener(ef) {}
  }]);

  return Lemon;
})(shui.EventManager);

var Controllable = (function (_R$Component) {
  _inherits(Controllable, _R$Component);

  function Controllable(props) {
    _classCallCheck(this, Controllable);

    _get(Object.getPrototypeOf(Controllable.prototype), 'constructor', this).call(this, props);
  }

  return Controllable;
})(R.Component);

(function () {
  var objectTypes = {
    'function': true,
    'object': true
  };
  /** Detect free variable `exports`. */
  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = freeExports && freeModule && typeof global == 'object' && global && global.Object && global;

  /** Detect free variable `self`. */
  var freeSelf = objectTypes[typeof self] && self && self.Object && self;

  /** Detect free variable `window`. */
  var freeWindow = objectTypes[typeof window] && window && window.Object && window;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports && freeExports;

  /**
  * Used as a reference to the global object.
  *
  * The `this` value is used if it's the global object to avoid Greasemonkey's
  * restricted `window` object, otherwise the `window` object is used.
  */
  var root = freeGlobal || freeWindow !== (this && this.window) && freeWindow || freeSelf || this;

  var EventManager = (function () {
    function EventManager(events) {
      _classCallCheck(this, EventManager);

      this.events = events;
      this.listeners = {};
    }

    _createClass(EventManager, [{
      key: 'getEvents',
      value: function getEvents() {
        return this.events;
      }
    }, {
      key: 'removeListeners',
      value: function removeListeners() {
        this.listeners = {};
      }
    }, {
      key: 'addEventListener',
      value: function addEventListener(evtName, listener, ctx) {
        if (this.events.indexOf(evtName) === -1) {
          throw new Error('The object does not support the event "' + evtName + '".');
        }
        this.listeners[evtName] = this.listeners[evtName] || [];
        var fn = ctx ? proxy(listener, ctx) : listener;
        fn.fn = listener;
        this.listeners[evtName].push(fn);
      }
    }, {
      key: 'removeEventListener',
      value: function removeEventListener(evtName, listener) {
        if (!this.listeners[evtName]) {
          throw new Error("Event '" + evtName + "' is not registered.");
        }
        var i = 0,
            list = this.listeners[evtName],
            l = list.length,
            idx = -1;
        for (; i < l; i++) {
          if (list[i].fn === listener) {
            idx = i;
            break;
          }
        }
        if (i !== -1) {
          this.listeners[evtName].splice(i, 1);
        }
      }
    }, {
      key: 'trigger',
      value: function trigger(evtName, e) {
        if (this.listeners[evtName]) {
          var list = this.listeners[evtName],
              i,
              l;
          for (i = 0, l = list.length; i < l; i++) {
            list[i](e);
          }
        }
      }
    }, {
      key: 'on',
      value: function on(evt, fn, ctx) {
        return this.addEventListener(evt, fn, ctx);
      }
    }, {
      key: 'off',
      value: function off(evtName, listener) {
        return this.removeEventListener(evtName, listener);
      }
    }]);

    return EventManager;
  })();

  root.shui = root.shui || {};
  root.shui.util = root.shui.util || {};
  root.shui.util.EventManager = EventManager;

  // Some AMD build optimizers like r.js check for condition patterns like the following:
  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
    // Expose lodash to the global object when an AMD loader is present to avoid
    // errors in cases where lodash is loaded by a script tag and not intended
    // as an AMD module. See http://requirejs.org/docs/errors.html#mismatch for
    // more details.
    root.shui = root.shui;

    // Define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module.
    define(function () {
      return root.shui.EventManager;
    });
  }
  // Check for `exports` after `define` in case a build optimizer adds an `exports` object.
  else if (freeExports && freeModule) {
      // Export for Node.js or RingoJS.
      if (moduleExports) {
        freeModule.exports = EventManager;
      }
      // Export for Rhino with CommonJS support.
      else {
          freeExports.EventManager = EventManager;
        }
    } else {
      // Export for a browser or Rhino.
      root.shui = root.shui || {};
      root.shui.util = root.shui.util || {};
      root.shui.util.EventManager = EventManager;
    }
}).call(undefined);

console.log(EventManager);
(function (R) {
  var objectTypes = {
    'function': true,
    'object': true
  };
  /** Detect free variable `exports`. */
  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = freeExports && freeModule && typeof global == 'object' && global && global.Object && global;

  /** Detect free variable `self`. */
  var freeSelf = objectTypes[typeof self] && self && self.Object && self;

  /** Detect free variable `window`. */
  var freeWindow = objectTypes[typeof window] && window && window.Object && window;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports && freeExports;

  /**
   * Used as a reference to the global object.
   *
   * The `this` value is used if it's the global object to avoid Greasemonkey's
   * restricted `window` object, otherwise the `window` object is used.
   */
  var root = freeGlobal || freeWindow !== (this && this.window) && freeWindow || freeSelf || this;

  var SHButton = (function (_R$Component2) {
    _inherits(SHButton, _R$Component2);

    function SHButton(props) {
      _classCallCheck(this, SHButton);

      _get(Object.getPrototypeOf(SHButton.prototype), 'constructor', this).call(this, props);
      this.props = props;
      this.state = {
        enabled: props.enabled
      };
    }

    _createClass(SHButton, [{
      key: 'setEnabled',
      value: function setEnabled(enabled) {
        this.setState({
          enabled: enabled
        });
      }
    }, {
      key: 'onClicked',
      value: function onClicked(evt) {
        if (!this.state.enabled) {
          return false;
        }
      }
    }, {
      key: 'render',
      value: function render() {
        return React.createElement(
          'div',
          { className: 'shui-button', 'data-state': this.state.enabled ? 'enabled' : 'disabled', 'data-button-type': this.props.buttonType, onClick: this.onClicked.bind(this) },
          React.createElement('i', { className: "shui-button-icon " + this.props.icon }),
          React.createElement(
            'span',
            { className: 'shui-button-label' },
            this.props.label
          )
        );
      }
    }]);

    return SHButton;
  })(R.Component);

  SHButton.defaultProps = {
    enabled: false,
    buttonType: 'default'
  };

  root.shui = root.shui || {};
  root.shui.SHButton = SHButton;

  // Some AMD build optimizers like r.js check for condition patterns like the following:
  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
    // Expose lodash to the global object when an AMD loader is present to avoid
    // errors in cases where lodash is loaded by a script tag and not intended
    // as an AMD module. See http://requirejs.org/docs/errors.html#mismatch for
    // more details.
    root.shui = root.shui;

    // Define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module.
    define(function () {
      return SHButton;
    });
  }
  // Check for `exports` after `define` in case a build optimizer adds an `exports` object.
  else if (freeExports && freeModule) {
      // Export for Node.js or RingoJS.
      if (moduleExports) {
        freeModule.exports = SHButton;
      }
      // Export for Rhino with CommonJS support.
      else {
          freeExports.SHButton = SHButton;
        }
    } else {
      // Export for a browser or Rhino.
      root.shui = root.shui || {};
      root.shui.SHButton = SHButton;
      // root.SHButton = _;
    }
}).call(undefined, React || {});
(function (R) {
  var objectTypes = {
    'function': true,
    'object': true
  };
  /** Detect free variable `exports`. */
  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = freeExports && freeModule && typeof global == 'object' && global && global.Object && global;

  /** Detect free variable `self`. */
  var freeSelf = objectTypes[typeof self] && self && self.Object && self;

  /** Detect free variable `window`. */
  var freeWindow = objectTypes[typeof window] && window && window.Object && window;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports && freeExports;

  /**
   * Used as a reference to the global object.
   *
   * The `this` value is used if it's the global object to avoid Greasemonkey's
   * restricted `window` object, otherwise the `window` object is used.
   */
  var root = freeGlobal || freeWindow !== (this && this.window) && freeWindow || freeSelf || this;

  var EventManager = (function () {
    function EventManager(events, strict) {
      _classCallCheck(this, EventManager);

      this.events = events;
      this.__id = 0;
      this.listeners = {};
      this.strict = strict || false;
    }

    _createClass(EventManager, [{
      key: 'addEventListener',
      value: function addEventListener(eventName, fn, ctx) {
        var fx = this.strict && this.events.indexOf(eventName) !== -1 && fn || !this.strict && fn;
        if (!fx) {
          throw new Error('The provided event is not registered or the callback is invalid.');
        }
        (this.listeners[eventName] = this.listeners[eventName] || []).push(f);
      }
    }, {
      key: 'setEnabled',
      value: function setEnabled(enabled) {
        this.setState({
          enabled: enabled
        });
      }
    }, {
      key: 'onClicked',
      value: function onClicked(evt) {
        if (!this.state.enabled) {
          return false;
        }
      }
    }, {
      key: 'render',
      value: function render() {
        return React.createElement(
          'div',
          { className: 'shui-button', 'data-state': this.state.enabled ? 'enabled' : 'disabled', 'data-button-type': this.props.buttonType, onClick: this.onClicked.bind(this) },
          React.createElement('i', { className: "shui-button-icon " + this.props.icon }),
          React.createElement(
            'span',
            { className: 'shui-button-label' },
            this.props.label
          )
        );
      }
    }]);

    return EventManager;
  })();

  EventManager.defaultProps = {
    events: []
  };

  root.shui = root.shui || {};
  root.shui.EventManager = EventManager;

  // Some AMD build optimizers like r.js check for condition patterns like the following:
  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
    // Expose lodash to the global object when an AMD loader is present to avoid
    // errors in cases where lodash is loaded by a script tag and not intended
    // as an AMD module. See http://requirejs.org/docs/errors.html#mismatch for
    // more details.
    root.shui = root.shui;

    // Define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module.
    define(function () {
      return SHButton;
    });
  }
  // Check for `exports` after `define` in case a build optimizer adds an `exports` object.
  else if (freeExports && freeModule) {
      // Export for Node.js or RingoJS.
      if (moduleExports) {
        freeModule.exports = SHButton;
      }
      // Export for Rhino with CommonJS support.
      else {
          freeExports.SHButton = SHButton;
        }
    } else {
      // Export for a browser or Rhino.
      root.shui = root.shui || {};
      root.shui.SHButton = SHButton;
      // root.SHButton = _;
    }
}).call(undefined, React || {});
(function (R) {
  var objectTypes = {
    'function': true,
    'object': true
  };
  /** Detect free variable `exports`. */
  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = freeExports && freeModule && typeof global == 'object' && global && global.Object && global;

  /** Detect free variable `self`. */
  var freeSelf = objectTypes[typeof self] && self && self.Object && self;

  /** Detect free variable `window`. */
  var freeWindow = objectTypes[typeof window] && window && window.Object && window;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports && freeExports;

  /**
   * Used as a reference to the global object.
   *
   * The `this` value is used if it's the global object to avoid Greasemonkey's
   * restricted `window` object, otherwise the `window` object is used.
   */
  var root = freeGlobal || freeWindow !== (this && this.window) && freeWindow || freeSelf || this;

  var SHTextField = (function (_R$Component3) {
    _inherits(SHTextField, _R$Component3);

    function SHTextField(props) {
      _classCallCheck(this, SHTextField);

      _get(Object.getPrototypeOf(SHTextField.prototype), 'constructor', this).call(this, props);
      this.props = props;
      this.state = {
        enabled: props.enabled,
        text: props.text,
        valid: props.valid
      };
    }

    _createClass(SHTextField, [{
      key: 'setEnabled',
      value: function setEnabled(enabled) {
        this.setState({
          enabled: enabled
        });
      }
    }, {
      key: 'isValid',
      value: function isValid() {
        return this.state.valid;
      }
    }, {
      key: 'onTextChanged',
      value: function onTextChanged(evt) {
        this.setState({
          text: evt.target.value,
          valid: this.props.validate(evt.target.value)
        });
      }
    }, {
      key: 'onClicked',
      value: function onClicked(evt) {
        if (!this.state.enabled) {
          return false;
        }
      }
    }, {
      key: 'componentDidUpdate',
      value: function componentDidUpdate() {
        var onUpdate = this.props.onUpdate;
        onUpdate(this.state.text, this);
      }
    }, {
      key: 'render',
      value: function render() {
        return React.createElement(
          'div',
          { className: 'shui-textfield', 'data-valid': this.state.valid, 'data-state': this.state.enabled ? 'enabled' : 'disabled', 'data-textfield-type': this.props.textFieldType, onClick: this.onClicked.bind(this) },
          React.createElement('input', { type: this.props.fieldType, value: this.state.text, onChange: this.onTextChanged.bind(this) })
        );
      }
    }]);

    return SHTextField;
  })(R.Component);

  SHTextField.defaultProps = {
    onUpdate: function onUpdate() {},
    validate: function validate() {
      return true;
    },
    enabled: false,
    valid: true,
    textFieldType: 'default'
  };

  root.shui = root.shui || {};
  root.shui.SHTextField = SHTextField;

  // Some AMD build optimizers like r.js check for condition patterns like the following:
  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
    // Expose lodash to the global object when an AMD loader is present to avoid
    // errors in cases where lodash is loaded by a script tag and not intended
    // as an AMD module. See http://requirejs.org/docs/errors.html#mismatch for
    // more details.
    root.shui = root.shui;

    // Define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module.
    define(function () {
      return;
    });
  }
  // Check for `exports` after `define` in case a build optimizer adds an `exports` object.
  else if (freeExports && freeModule) {
      // Export for Node.js or RingoJS.
      if (moduleExports) {
        freeModule.exports = SHTextField;
      }
      // Export for Rhino with CommonJS support.
      else {
          freeExports.SHTextField = SHTextField;
        }
    } else {
      // Export for a browser or Rhino.
      root.shui = root.shui || {};
      root.shui.SHTextField = SHTextField;
      // root.SHTextField = _;
    }
}).call(undefined, React || {});
(function (R) {
  var objectTypes = {
    'function': true,
    'object': true
  };
  /** Detect free variable `exports`. */
  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = freeExports && freeModule && typeof global == 'object' && global && global.Object && global;

  /** Detect free variable `self`. */
  var freeSelf = objectTypes[typeof self] && self && self.Object && self;

  /** Detect free variable `window`. */
  var freeWindow = objectTypes[typeof window] && window && window.Object && window;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports && freeExports;

  /**
   * Used as a reference to the global object.
   *
   * The `this` value is used if it's the global object to avoid Greasemonkey's
   * restricted `window` object, otherwise the `window` object is used.
   */
  var root = freeGlobal || freeWindow !== (this && this.window) && freeWindow || freeSelf || this;

  var SHButtonIcon = (function (_R$Component4) {
    _inherits(SHButtonIcon, _R$Component4);

    function SHButtonIcon(props) {
      _classCallCheck(this, SHButtonIcon);

      _get(Object.getPrototypeOf(SHButtonIcon.prototype), 'constructor', this).call(this, props);
      this.state = {
        alt: props.alt ? props.alt : false
      };
    }

    _createClass(SHButtonIcon, [{
      key: 'shouldComponentUpdate',
      value: function shouldComponentUpdate(nextProps, nextState) {
        return nextState.alt !== this.state.alt;
      }
    }, {
      key: 'setAlternative',
      value: function setAlternative(alt) {
        this.setState({
          alt: alt
        });
      }
    }, {
      key: 'render',
      value: function render() {
        return React.createElement('i', { className: this.props.icon + ' ' + (this.state.alt ? 'alt' : '') });
      }
    }]);

    return SHButtonIcon;
  })(R.Component);

  SHButtonIcon.defaultProps = {
    onUpdate: function onUpdate() {},
    validate: function validate() {
      return true;
    },
    enabled: false,
    valid: true,
    textFieldType: 'default'
  };

  root.shui = root.shui || {};
  root.shui.SHButtonIcon = SHButtonIcon;

  // Some AMD build optimizers like r.js check for condition patterns like the following:
  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
    // Expose lodash to the global object when an AMD loader is present to avoid
    // errors in cases where lodash is loaded by a script tag and not intended
    // as an AMD module. See http://requirejs.org/docs/errors.html#mismatch for
    // more details.
    root.shui = root.shui;

    // Define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module.
    define(function () {
      return SHButtonIcon;
    });
  }
  // Check for `exports` after `define` in case a build optimizer adds an `exports` object.
  else if (freeExports && freeModule) {
      // Export for Node.js or RingoJS.
      if (moduleExports) {
        freeModule.exports = SHButtonIcon;
      }
      // Export for Rhino with CommonJS support.
      else {
          freeExports.SHButtonIcon = SHButtonIcon;
        }
    } else {
      // Export for a browser or Rhino.
      root.shui = root.shui || {};
      root.shui.SHButtonIcon = SHButtonIcon;
    }
}).call(undefined, React || {});
(function (R) {
  var objectTypes = {
    'function': true,
    'object': true
  };
  /** Detect free variable `exports`. */
  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = freeExports && freeModule && typeof global == 'object' && global && global.Object && global;

  /** Detect free variable `self`. */
  var freeSelf = objectTypes[typeof self] && self && self.Object && self;

  /** Detect free variable `window`. */
  var freeWindow = objectTypes[typeof window] && window && window.Object && window;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports && freeExports;

  /**
   * Used as a reference to the global object.
   *
   * The `this` value is used if it's the global object to avoid Greasemonkey's
   * restricted `window` object, otherwise the `window` object is used.
   */
  var root = freeGlobal || freeWindow !== (this && this.window) && freeWindow || freeSelf || this;

  var SHMapView = (function (_R$Component5) {
    _inherits(SHMapView, _R$Component5);

    function SHMapView(props) {
      _classCallCheck(this, SHMapView);

      _get(Object.getPrototypeOf(SHMapView.prototype), 'constructor', this).call(this, props);
      this.props = props;
      this.state = {
        enabled: props.enabled
      };
    }

    _createClass(SHMapView, [{
      key: 'setEnabled',
      value: function setEnabled(enabled) {
        this.setState({
          enabled: enabled
        });
      }
    }, {
      key: 'onClicked',
      value: function onClicked(evt) {
        if (!this.state.enabled) {
          return false;
        }
      }
    }, {
      key: 'componentDidMound',
      value: function componentDidMound() {
        var provider = this.props.mapProvider;
        if (!provider) {
          throw new Error("No map provider");
        }
        this.map = provider.createMap(this.findDOMNode(), this.props.mapOptions);
      }
    }, {
      key: 'render',
      value: function render() {
        return React.createElement('div', { className: 'shui-mapview', 'data-state': this.state.enabled ? 'enabled' : 'disabled', 'data-mapview-type': this.props.mapviewType, onClick: this.onClicked.bind(this) });
      }
    }]);

    return SHMapView;
  })(R.Component);

  SHMapView.defaultProps = {
    enabled: false,
    buttonType: 'default'
  };

  root.shui = root.shui || {};
  root.shui.SHMapView = SHMapView;

  // Some AMD build optimizers like r.js check for condition patterns like the following:
  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
    // Expose lodash to the global object when an AMD loader is present to avoid
    // errors in cases where lodash is loaded by a script tag and not intended
    // as an AMD module. See http://requirejs.org/docs/errors.html#mismatch for
    // more details.
    root.shui = root.shui;

    // Define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module.
    define(function () {
      return SHMapView;
    });
  }
  // Check for `exports` after `define` in case a build optimizer adds an `exports` object.
  else if (freeExports && freeModule) {
      // Export for Node.js or RingoJS.
      if (moduleExports) {
        freeModule.exports = SHMapView;
      }
      // Export for Rhino with CommonJS support.
      else {
          freeExports.SHMapView = SHMapView;
        }
    } else {
      // Export for a browser or Rhino.
      root.shui = root.shui || {};
      root.shui.SHMapView = SHMapView;
      // root.SHButton = _;
    }
}).call(undefined, React || {});
(function (R) {
  var objectTypes = {
    'function': true,
    'object': true
  };
  /** Detect free variable `exports`. */
  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = freeExports && freeModule && typeof global == 'object' && global && global.Object && global;

  /** Detect free variable `self`. */
  var freeSelf = objectTypes[typeof self] && self && self.Object && self;

  /** Detect free variable `window`. */
  var freeWindow = objectTypes[typeof window] && window && window.Object && window;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports && freeExports;

  /**
   * Used as a reference to the global object.
   *
   * The `this` value is used if it's the global object to avoid Greasemonkey's
   * restricted `window` object, otherwise the `window` object is used.
   */
  var root = freeGlobal || freeWindow !== (this && this.window) && freeWindow || freeSelf || this;

  var SHPlayerButton = (function (_React$Component) {
    _inherits(SHPlayerButton, _React$Component);

    function SHPlayerButton(props) {
      _classCallCheck(this, SHPlayerButton);

      _get(Object.getPrototypeOf(SHPlayerButton.prototype), 'constructor', this).call(this, props);
      this._iconComponent = null;
    }

    _createClass(SHPlayerButton, [{
      key: 'shouldComponentRender',
      value: function shouldComponentRender(nextProps, nextState) {
        return nextState.alt !== this.state.alt;
      }
    }, {
      key: 'onClicked',
      value: function onClicked(e) {
        this.props.handleClick(e, this, this._iconComponent);
      }
    }, {
      key: 'onIconMounted',
      value: function onIconMounted(e) {
        this._iconComponent = e;
      }
    }, {
      key: 'render',
      value: function render() {
        return React.createElement(
          'div',
          { className: 'shui-player-button', onClick: this.onClicked.bind(this) },
          React.createElement(ButtonIcon, { icon: this.props.icon, alt: this.props.alt, ref: this.onIconMounted.bind(this) })
        );
      }
    }]);

    return SHPlayerButton;
  })(React.Component);

  SHPlayerButton.defaultProps = {
    onUpdate: function onUpdate() {},
    validate: function validate() {
      return true;
    },
    enabled: false,
    valid: true,
    textFieldType: 'default'
  };

  root.shui = root.shui || {};
  root.shui.SHPlayerButton = SHPlayerButton;

  // Some AMD build optimizers like r.js check for condition patterns like the following:
  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
    // Expose lodash to the global object when an AMD loader is present to avoid
    // errors in cases where lodash is loaded by a script tag and not intended
    // as an AMD module. See http://requirejs.org/docs/errors.html#mismatch for
    // more details.
    root.shui = root.shui;

    // Define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module.
    define(function () {
      return;
    });
  }
  // Check for `exports` after `define` in case a build optimizer adds an `exports` object.
  else if (freeExports && freeModule) {
      // Export for Node.js or RingoJS.
      if (moduleExports) {
        freeModule.exports = SHPlayerButton;
      }
      // Export for Rhino with CommonJS support.
      else {
          freeExports.SHPlayerButton = SHPlayerButton;
        }
    } else {
      // Export for a browser or Rhino.
      root.shui = root.shui || {};
      root.shui.SHPlayerButton = SHButtonIcon;
      // root.SHTextField = _;
    }
}).call(undefined, React || {});
(function (R) {
  var objectTypes = {
    'function': true,
    'object': true
  };
  /** Detect free variable `exports`. */
  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = freeExports && freeModule && typeof global == 'object' && global && global.Object && global;

  /** Detect free variable `self`. */
  var freeSelf = objectTypes[typeof self] && self && self.Object && self;

  /** Detect free variable `window`. */
  var freeWindow = objectTypes[typeof window] && window && window.Object && window;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports && freeExports;

  /**
   * Used as a reference to the global object.
   *
   * The `this` value is used if it's the global object to avoid Greasemonkey's
   * restricted `window` object, otherwise the `window` object is used.
   */
  var root = freeGlobal || freeWindow !== (this && this.window) && freeWindow || freeSelf || this;

  var SHSliderNob = (function (_R$Component6) {
    _inherits(SHSliderNob, _R$Component6);

    function SHSliderNob(props) {
      _classCallCheck(this, SHSliderNob);

      _get(Object.getPrototypeOf(SHSliderNob.prototype), 'constructor', this).call(this, props);
      this.state = {
        position: props.position
      };
    }

    _createClass(SHSliderNob, [{
      key: 'onMouseDown',
      value: function onMouseDown(e) {
        this.props.slider.startDragging();
      }
    }, {
      key: 'onTooltipMounted',
      value: function onTooltipMounted(e) {
        this._tooltip = e;
      }
    }, {
      key: 'setPosition',
      value: function setPosition(e) {
        var el = ReactDOM.findDOMNode(this);
        $(el).css('left', e);
        this._tooltip.setText(parseInt(e).toFixed(2));
      }
    }, {
      key: 'render',
      value: function render() {
        return React.createElement(
          'div',
          { className: 'shui-slider-nob', onMouseDown: this.onMouseDown.bind(this) },
          React.createElement(SliderTooltip, { text: this.props.position, ref: this.onTooltipMounted.bind(this) })
        );
      }
    }]);

    return SHSliderNob;
  })(R.Component);

  SHSliderNob.defaultProps = {
    onUpdate: function onUpdate() {},
    validate: function validate() {
      return true;
    },
    enabled: false,
    valid: true,
    textFieldType: 'default'
  };

  root.shui = root.shui || {};
  root.shui.SHSliderNob = SHSliderNob;

  // Some AMD build optimizers like r.js check for condition patterns like the following:
  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
    // Expose lodash to the global object when an AMD loader is present to avoid
    // errors in cases where lodash is loaded by a script tag and not intended
    // as an AMD module. See http://requirejs.org/docs/errors.html#mismatch for
    // more details.
    root.shui = root.shui;

    // Define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module.
    define(function () {
      return SHSliderNob;
    });
  }
  // Check for `exports` after `define` in case a build optimizer adds an `exports` object.
  else if (freeExports && freeModule) {
      // Export for Node.js or RingoJS.
      if (moduleExports) {
        freeModule.exports = SHSliderNob;
      }
      // Export for Rhino with CommonJS support.
      else {
          freeExports.SHSliderNob = SHSliderNob;
        }
    } else {
      // Export for a browser or Rhino.
      root.shui = root.shui || {};
      root.shui.SHSliderNob = SHSliderNob;
      // root.SHTextField = _;
    }
}).call(undefined, React || {});
(function (R) {
  var objectTypes = {
    'function': true,
    'object': true
  };
  /** Detect free variable `exports`. */
  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = freeExports && freeModule && typeof global == 'object' && global && global.Object && global;

  /** Detect free variable `self`. */
  var freeSelf = objectTypes[typeof self] && self && self.Object && self;

  /** Detect free variable `window`. */
  var freeWindow = objectTypes[typeof window] && window && window.Object && window;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports && freeExports;

  /**
   * Used as a reference to the global object.
   *
   * The `this` value is used if it's the global object to avoid Greasemonkey's
   * restricted `window` object, otherwise the `window` object is used.
   */
  var root = freeGlobal || freeWindow !== (this && this.window) && freeWindow || freeSelf || this;

  var SHSliderTooltip = (function (_React$Component2) {
    _inherits(SHSliderTooltip, _React$Component2);

    function SHSliderTooltip(props) {
      _classCallCheck(this, SHSliderTooltip);

      _get(Object.getPrototypeOf(SHSliderTooltip.prototype), 'constructor', this).call(this, props);
      this.state = {
        text: props.text
      };
    }

    _createClass(SHSliderTooltip, [{
      key: 'setText',
      value: function setText(txt) {
        var el = $(ReactDOM.findDOMNode(this));
        el.html(txt);
      }
    }, {
      key: 'render',
      value: function render() {
        return React.createElement(
          'div',
          { className: 'shui-slider-tooltip' },
          this.state.text
        );
      }
    }]);

    return SHSliderTooltip;
  })(React.Component);

  SHSliderTooltip.defaultProps = {
    onUpdate: function onUpdate() {},
    validate: function validate() {
      return true;
    },
    enabled: false,
    valid: true,
    textFieldType: 'default'
  };

  root.shui = root.shui || {};
  root.shui.SHSliderTooltip = SHSliderTooltip;

  // Some AMD build optimizers like r.js check for condition patterns like the following:
  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
    // Expose lodash to the global object when an AMD loader is present to avoid
    // errors in cases where lodash is loaded by a script tag and not intended
    // as an AMD module. See http://requirejs.org/docs/errors.html#mismatch for
    // more details.
    root.shui = root.shui;

    // Define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module.
    define(function () {
      return SHSliderTooltip;
    });
  }
  // Check for `exports` after `define` in case a build optimizer adds an `exports` object.
  else if (freeExports && freeModule) {
      // Export for Node.js or RingoJS.
      if (moduleExports) {
        freeModule.exports = SHSliderTooltip;
      }
      // Export for Rhino with CommonJS support.
      else {
          freeExports.SHSliderTooltip = SHSliderTooltip;
        }
    } else {
      // Export for a browser or Rhino.
      root.shui = root.shui || {};
      root.shui.SHSliderTooltip = SHSliderTooltip;
      // root.SHTextField = _;
    }
}).call(undefined, React || {});
(function (R) {
  var objectTypes = {
    'function': true,
    'object': true
  };
  /** Detect free variable `exports`. */
  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = freeExports && freeModule && typeof global == 'object' && global && global.Object && global;

  /** Detect free variable `self`. */
  var freeSelf = objectTypes[typeof self] && self && self.Object && self;

  /** Detect free variable `window`. */
  var freeWindow = objectTypes[typeof window] && window && window.Object && window;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports && freeExports;

  /**
   * Used as a reference to the global object.
   *
   * The `this` value is used if it's the global object to avoid Greasemonkey's
   * restricted `window` object, otherwise the `window` object is used.
   */
  var root = freeGlobal || freeWindow !== (this && this.window) && freeWindow || freeSelf || this;

  var SHTimelinePlayer = (function (_R$Component7) {
    _inherits(SHTimelinePlayer, _R$Component7);

    function SHTimelinePlayer(props) {
      _classCallCheck(this, SHTimelinePlayer);

      _get(Object.getPrototypeOf(SHTimelinePlayer.prototype), 'constructor', this).call(this, props);
      this.state = {};
      this._buttons = {};
    }

    _createClass(SHTimelinePlayer, [{
      key: 'onButtonMounted',
      value: function onButtonMounted(button) {
        this.props.controller.onButtonMounted(button.props.buttonKey, button);
      }
    }, {
      key: 'render',
      value: function render() {
        var controller = this.props.controller;
        return React.createElement(
          'div',
          { className: 'shui-timeline-player' },
          React.createElement(PlayerButton, { buttonKey: 'prev', handleClick: controller.onButtonClicked.bind(controller), ref: this.onButtonMounted.bind(this), icon: 'icon-timeline-fast-backward' }),
          React.createElement(PlayerButton, { buttonKey: 'play', handleClick: controller.onButtonClicked.bind(controller), ref: this.onButtonMounted.bind(this), icon: 'icon-timeline-play', alt: controller.playing }),
          React.createElement(PlayerButton, { buttonKey: 'stop', handleClick: controller.onButtonClicked.bind(controller), ref: this.onButtonMounted.bind(this), icon: 'icon-timeline-stop' }),
          React.createElement(PlayerButton, { buttonKey: 'next', handleClick: controller.onButtonClicked.bind(controller), ref: this.onButtonMounted.bind(this), icon: 'icon-timeline-fast-forward' })
        );
      }
    }]);

    return SHTimelinePlayer;
  })(R.Component);

  SHTimelinePlayer.defaultProps = {
    onUpdate: function onUpdate() {},
    validate: function validate() {
      return true;
    },
    enabled: false,
    valid: true,
    textFieldType: 'default'
  };

  root.shui = root.shui || {};
  root.shui.SHTimelinePlayer = SHTimelinePlayer;

  // Some AMD build optimizers like r.js check for condition patterns like the following:
  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
    // Expose lodash to the global object when an AMD loader is present to avoid
    // errors in cases where lodash is loaded by a script tag and not intended
    // as an AMD module. See http://requirejs.org/docs/errors.html#mismatch for
    // more details.
    root.shui = root.shui;

    // Define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module.
    define(function () {
      return SHTimelinePlayer;
    });
  }
  // Check for `exports` after `define` in case a build optimizer adds an `exports` object.
  else if (freeExports && freeModule) {
      // Export for Node.js or RingoJS.
      if (moduleExports) {
        freeModule.exports = SHTimelinePlayer;
      }
      // Export for Rhino with CommonJS support.
      else {
          freeExports.SHTimelinePlayer = SHTimelinePlayer;
        }
    } else {
      // Export for a browser or Rhino.
      root.shui = root.shui || {};
      root.shui.SHTimelinePlayer = SHTimelinePlayer;
    }
}).call(undefined, React || {});
(function (R) {
  var objectTypes = {
    'function': true,
    'object': true
  };
  /** Detect free variable `exports`. */
  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = freeExports && freeModule && typeof global == 'object' && global && global.Object && global;

  /** Detect free variable `self`. */
  var freeSelf = objectTypes[typeof self] && self && self.Object && self;

  /** Detect free variable `window`. */
  var freeWindow = objectTypes[typeof window] && window && window.Object && window;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports && freeExports;

  /**
   * Used as a reference to the global object.
   *
   * The `this` value is used if it's the global object to avoid Greasemonkey's
   * restricted `window` object, otherwise the `window` object is used.
   */
  var root = freeGlobal || freeWindow !== (this && this.window) && freeWindow || freeSelf || this;

  var SHTimelineMap = (function (_EventManager) {
    _inherits(SHTimelineMap, _EventManager);

    function SHTimelineMap() {
      _classCallCheck(this, SHTimelineMap);

      _get(Object.getPrototypeOf(SHTimelineMap.prototype), 'constructor', this).call(this, ['onLoaded']);
    }

    _createClass(SHTimelineMap, [{
      key: 'render',
      value: function render(parentEl) {
        this.el = $('<div class="shui-map-canvas"></div>').appendTo(parentEl || $('.screen-window'));
        L.mapbox.accessToken = 'pk.eyJ1Ijoic3VoYWlsYWJvb2QiLCJhIjoiMmY1ZWM5NDM2NmJlMmYzOTExNTUwZmE3MzBkYWEwZmYifQ.l0z4zBPbZ09VwMEZCu7cbA';
        this.map = L.mapbox.map(this.el.get(0), 'suhailabood.c1e06344');
      }
    }]);

    return SHTimelineMap;
  })(EventManager);

  SHTimelineMap.defaultProps = {
    onUpdate: function onUpdate() {},
    validate: function validate() {
      return true;
    },
    enabled: false,
    valid: true,
    textFieldType: 'default'
  };

  root.shui = root.shui || {};
  root.shui.SHTimelineMap = SHTimelineMap;

  // Some AMD build optimizers like r.js check for condition patterns like the following:
  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
    // Expose lodash to the global object when an AMD loader is present to avoid
    // errors in cases where lodash is loaded by a script tag and not intended
    // as an AMD module. See http://requirejs.org/docs/errors.html#mismatch for
    // more details.
    root.shui = root.shui;

    // Define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module.
    define(function () {
      return SHTimelineMap;
    });
  }
  // Check for `exports` after `define` in case a build optimizer adds an `exports` object.
  else if (freeExports && freeModule) {
      // Export for Node.js or RingoJS.
      if (moduleExports) {
        freeModule.exports = SHTimelineMap;
      }
      // Export for Rhino with CommonJS support.
      else {
          freeExports.SHTimelineMap = SHTimelineMap;
        }
    } else {
      // Export for a browser or Rhino.
      root.shui = root.shui || {};
      root.shui.SHTimelineMap = SHTimelineMap;
      // root.SHTextField = _;
    }
}).call(undefined, React || {});
(function (R) {
  var objectTypes = {
    'function': true,
    'object': true
  };
  /** Detect free variable `exports`. */
  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = freeExports && freeModule && typeof global == 'object' && global && global.Object && global;

  /** Detect free variable `self`. */
  var freeSelf = objectTypes[typeof self] && self && self.Object && self;

  /** Detect free variable `window`. */
  var freeWindow = objectTypes[typeof window] && window && window.Object && window;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports && freeExports;

  /**
   * Used as a reference to the global object.
   *
   * The `this` value is used if it's the global object to avoid Greasemonkey's
   * restricted `window` object, otherwise the `window` object is used.
   */
  var root = freeGlobal || freeWindow !== (this && this.window) && freeWindow || freeSelf || this;

  var SHTimelineComponent = (function (_React$Component3) {
    _inherits(SHTimelineComponent, _React$Component3);

    function SHTimelineComponent(props) {
      _classCallCheck(this, SHTimelineComponent);

      _get(Object.getPrototypeOf(SHTimelineComponent.prototype), 'constructor', this).call(this, props);
      this.state = {
        items: props.items,
        index: props.index,
        min: props.min,
        max: props.max
      };
    }

    _createClass(SHTimelineComponent, [{
      key: 'setItems',
      value: function setItems(items) {
        this.setState({
          items: items
        });
      }
    }, {
      key: 'render',
      value: function render() {
        return React.createElement(
          'div',
          { className: 'shui-timeline' },
          React.createElement(TimelinePlayer, { controller: this.props.controller }),
          React.createElement(TimelineSlider, { controller: this.props.controller })
        );
      }
    }]);

    return SHTimelineComponent;
  })(React.Component);

  SHTimelineComponent.defaultProps = {
    onUpdate: function onUpdate() {},
    validate: function validate() {
      return true;
    },
    enabled: false,
    valid: true,
    textFieldType: 'default'
  };

  root.shui = root.shui || {};
  root.shui.SHTimelineComponent = SHTimelineComponent;

  // Some AMD build optimizers like r.js check for condition patterns like the following:
  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
    // Expose lodash to the global object when an AMD loader is present to avoid
    // errors in cases where lodash is loaded by a script tag and not intended
    // as an AMD module. See http://requirejs.org/docs/errors.html#mismatch for
    // more details.
    root.shui = root.shui;

    // Define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module.
    define(function () {
      return SHTimelineComponent;
    });
  }
  // Check for `exports` after `define` in case a build optimizer adds an `exports` object.
  else if (freeExports && freeModule) {
      // Export for Node.js or RingoJS.
      if (moduleExports) {
        freeModule.exports = SHTimelineComponent;
      }
      // Export for Rhino with CommonJS support.
      else {
          freeExports.SHTimelineComponent = SHTimelineComponent;
        }
    } else {
      // Export for a browser or Rhino.
      root.shui = root.shui || {};
      root.shui.SHTimelineComponent = SHTimelineComponent;
    }
}).call(undefined, React || {});